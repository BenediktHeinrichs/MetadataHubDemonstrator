/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Affiliation
 */
export interface Affiliation {
    /**
     * 
     * @type {string}
     * @memberof Affiliation
     */
    'affiliation'?: string;
}
/**
 * 
 * @export
 * @interface AlternateIdentifier
 */
export interface AlternateIdentifier {
    /**
     * 
     * @type {string}
     * @memberof AlternateIdentifier
     */
    'alternateIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlternateIdentifier
     */
    'alternateIdentifierType'?: string;
}
/**
 * 
 * @export
 * @interface Content
 */
export interface Content {
    /**
     * 
     * @type {string}
     * @memberof Content
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Content
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Content
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface Contributor
 */
export interface Contributor {
    /**
     * 
     * @type {string}
     * @memberof Contributor
     */
    'contributorType'?: ContributorContributorTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Contributor
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Contributor
     */
    'nameType'?: ContributorNameTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Contributor
     */
    'givenName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Contributor
     */
    'familyName'?: string;
    /**
     * 
     * @type {Set<NameIdentifier>}
     * @memberof Contributor
     */
    'nameIdentifiers'?: Set<NameIdentifier>;
    /**
     * 
     * @type {Set<Affiliation>}
     * @memberof Contributor
     */
    'affiliations'?: Set<Affiliation>;
    /**
     * 
     * @type {string}
     * @memberof Contributor
     */
    'lang'?: string;
}

export const ContributorContributorTypeEnum = {
    ContactPerson: 'ContactPerson',
    DataCollector: 'DataCollector',
    DataCurator: 'DataCurator',
    DataManager: 'DataManager',
    Distributor: 'Distributor',
    Editor: 'Editor',
    HostingInstitution: 'HostingInstitution',
    Producer: 'Producer',
    ProjectLeader: 'ProjectLeader',
    ProjectManager: 'ProjectManager',
    ProjectMember: 'ProjectMember',
    RegistrationAgency: 'RegistrationAgency',
    RegistrationAuthority: 'RegistrationAuthority',
    RelatedPerson: 'RelatedPerson',
    Researcher: 'Researcher',
    ResearchGroup: 'ResearchGroup',
    RightsHolder: 'RightsHolder',
    Sponsor: 'Sponsor',
    Supervisor: 'Supervisor',
    WorkPackageLeader: 'WorkPackageLeader',
    Other: 'Other'
} as const;

export type ContributorContributorTypeEnum = typeof ContributorContributorTypeEnum[keyof typeof ContributorContributorTypeEnum];
export const ContributorNameTypeEnum = {
    Organizational: 'Organizational',
    Personal: 'Personal'
} as const;

export type ContributorNameTypeEnum = typeof ContributorNameTypeEnum[keyof typeof ContributorNameTypeEnum];

/**
 * 
 * @export
 * @interface Creator
 */
export interface Creator {
    /**
     * 
     * @type {string}
     * @memberof Creator
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Creator
     */
    'nameType'?: CreatorNameTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Creator
     */
    'givenName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Creator
     */
    'familyName'?: string;
    /**
     * 
     * @type {Set<NameIdentifier>}
     * @memberof Creator
     */
    'nameIdentifiers'?: Set<NameIdentifier>;
    /**
     * 
     * @type {Set<Affiliation>}
     * @memberof Creator
     */
    'affiliations'?: Set<Affiliation>;
    /**
     * 
     * @type {string}
     * @memberof Creator
     */
    'lang'?: string;
}

export const CreatorNameTypeEnum = {
    Organizational: 'Organizational',
    Personal: 'Personal'
} as const;

export type CreatorNameTypeEnum = typeof CreatorNameTypeEnum[keyof typeof CreatorNameTypeEnum];

/**
 * 
 * @export
 * @interface Datacite43Schema
 */
export interface Datacite43Schema {
    /**
     * 
     * @type {Types}
     * @memberof Datacite43Schema
     */
    'types'?: Types;
    /**
     * 
     * @type {Set<Identifier>}
     * @memberof Datacite43Schema
     */
    'identifiers'?: Set<Identifier>;
    /**
     * 
     * @type {Set<Creator>}
     * @memberof Datacite43Schema
     */
    'creators'?: Set<Creator>;
    /**
     * 
     * @type {Set<Title>}
     * @memberof Datacite43Schema
     */
    'titles'?: Set<Title>;
    /**
     * 
     * @type {string}
     * @memberof Datacite43Schema
     */
    'publisher'?: string;
    /**
     * 
     * @type {string}
     * @memberof Datacite43Schema
     */
    'publicationYear'?: string;
    /**
     * 
     * @type {Set<Subject>}
     * @memberof Datacite43Schema
     */
    'subjects'?: Set<Subject>;
    /**
     * 
     * @type {Set<Contributor>}
     * @memberof Datacite43Schema
     */
    'contributors'?: Set<Contributor>;
    /**
     * 
     * @type {Set<ModelDate>}
     * @memberof Datacite43Schema
     */
    'dates'?: Set<ModelDate>;
    /**
     * 
     * @type {string}
     * @memberof Datacite43Schema
     */
    'language'?: string;
    /**
     * 
     * @type {Set<AlternateIdentifier>}
     * @memberof Datacite43Schema
     */
    'alternateIdentifiers'?: Set<AlternateIdentifier>;
    /**
     * 
     * @type {Set<RelatedIdentifier>}
     * @memberof Datacite43Schema
     */
    'relatedIdentifiers'?: Set<RelatedIdentifier>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Datacite43Schema
     */
    'sizes'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Datacite43Schema
     */
    'formats'?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof Datacite43Schema
     */
    'version'?: string;
    /**
     * 
     * @type {Set<Rights>}
     * @memberof Datacite43Schema
     */
    'rightsList'?: Set<Rights>;
    /**
     * 
     * @type {Set<Description>}
     * @memberof Datacite43Schema
     */
    'descriptions'?: Set<Description>;
    /**
     * 
     * @type {Set<GeoLocation>}
     * @memberof Datacite43Schema
     */
    'geoLocations'?: Set<GeoLocation>;
    /**
     * 
     * @type {Set<FundingReference>}
     * @memberof Datacite43Schema
     */
    'fundingReferences'?: Set<FundingReference>;
    /**
     * 
     * @type {string}
     * @memberof Datacite43Schema
     */
    'schemaVersion'?: string;
}
/**
 * 
 * @export
 * @interface Description
 */
export interface Description {
    /**
     * 
     * @type {string}
     * @memberof Description
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Description
     */
    'descriptionType'?: DescriptionDescriptionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Description
     */
    'lang'?: string;
}

export const DescriptionDescriptionTypeEnum = {
    Abstract: 'Abstract',
    Methods: 'Methods',
    SeriesInformation: 'SeriesInformation',
    TableOfContents: 'TableOfContents',
    TechnicalInfo: 'TechnicalInfo',
    Other: 'Other'
} as const;

export type DescriptionDescriptionTypeEnum = typeof DescriptionDescriptionTypeEnum[keyof typeof DescriptionDescriptionTypeEnum];

/**
 * 
 * @export
 * @interface FundingReference
 */
export interface FundingReference {
    /**
     * 
     * @type {string}
     * @memberof FundingReference
     */
    'funderName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FundingReference
     */
    'funderIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof FundingReference
     */
    'funderIdentifierType'?: FundingReferenceFunderIdentifierTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FundingReference
     */
    'awardNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof FundingReference
     */
    'awardURI'?: string;
    /**
     * 
     * @type {string}
     * @memberof FundingReference
     */
    'awardTitle'?: string;
}

export const FundingReferenceFunderIdentifierTypeEnum = {
    Isni: 'ISNI',
    Grid: 'GRID',
    CrossrefFunderId: 'Crossref Funder ID',
    Other: 'Other'
} as const;

export type FundingReferenceFunderIdentifierTypeEnum = typeof FundingReferenceFunderIdentifierTypeEnum[keyof typeof FundingReferenceFunderIdentifierTypeEnum];

/**
 * 
 * @export
 * @interface GeoLocation
 */
export interface GeoLocation {
    /**
     * 
     * @type {string}
     * @memberof GeoLocation
     */
    'geoLocationPlace'?: string;
    /**
     * 
     * @type {GeoLocationPoint}
     * @memberof GeoLocation
     */
    'geoLocationPoint'?: GeoLocationPoint;
    /**
     * 
     * @type {GeoLocationBox}
     * @memberof GeoLocation
     */
    'geoLocationBox'?: GeoLocationBox;
    /**
     * 
     * @type {Set<GeoLocationPolygon>}
     * @memberof GeoLocation
     */
    'geoLocationPolygons'?: Set<GeoLocationPolygon>;
}
/**
 * 
 * @export
 * @interface GeoLocationBox
 */
export interface GeoLocationBox {
    /**
     * 
     * @type {number}
     * @memberof GeoLocationBox
     */
    'westBoundLongitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeoLocationBox
     */
    'eastBoundLongitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeoLocationBox
     */
    'southBoundLatitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeoLocationBox
     */
    'northBoundLatitude'?: number;
}
/**
 * 
 * @export
 * @interface GeoLocationPoint
 */
export interface GeoLocationPoint {
    /**
     * 
     * @type {number}
     * @memberof GeoLocationPoint
     */
    'pointLongitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GeoLocationPoint
     */
    'pointLatitude'?: number;
}
/**
 * 
 * @export
 * @interface GeoLocationPolygon
 */
export interface GeoLocationPolygon {
    /**
     * 
     * @type {Array<GeoLocationPoint>}
     * @memberof GeoLocationPolygon
     */
    'polygonPoints'?: Array<GeoLocationPoint>;
    /**
     * 
     * @type {GeoLocationPoint}
     * @memberof GeoLocationPolygon
     */
    'inPolygonPoint'?: GeoLocationPoint;
}
/**
 * 
 * @export
 * @interface Identifier
 */
export interface Identifier {
    /**
     * 
     * @type {string}
     * @memberof Identifier
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof Identifier
     */
    'identifierType'?: string;
}
/**
 * 
 * @export
 * @interface ModelDate
 */
export interface ModelDate {
    /**
     * 
     * @type {string}
     * @memberof ModelDate
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelDate
     */
    'dateType'?: ModelDateDateTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelDate
     */
    'dateInformation'?: string;
}

export const ModelDateDateTypeEnum = {
    Accepted: 'Accepted',
    Available: 'Available',
    Copyrighted: 'Copyrighted',
    Collected: 'Collected',
    Created: 'Created',
    Issued: 'Issued',
    Submitted: 'Submitted',
    Updated: 'Updated',
    Valid: 'Valid',
    Withdrawn: 'Withdrawn',
    Other: 'Other'
} as const;

export type ModelDateDateTypeEnum = typeof ModelDateDateTypeEnum[keyof typeof ModelDateDateTypeEnum];

/**
 * 
 * @export
 * @interface NameIdentifier
 */
export interface NameIdentifier {
    /**
     * 
     * @type {string}
     * @memberof NameIdentifier
     */
    'nameIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof NameIdentifier
     */
    'nameIdentifierScheme'?: string;
    /**
     * 
     * @type {string}
     * @memberof NameIdentifier
     */
    'schemeURI'?: string;
}
/**
 * 
 * @export
 * @interface RelatedIdentifier
 */
export interface RelatedIdentifier {
    /**
     * 
     * @type {string}
     * @memberof RelatedIdentifier
     */
    'relatedIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedIdentifier
     */
    'relatedIdentifierType'?: RelatedIdentifierRelatedIdentifierTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RelatedIdentifier
     */
    'relationType'?: RelatedIdentifierRelationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RelatedIdentifier
     */
    'relatedMetadataScheme'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedIdentifier
     */
    'schemeURI'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedIdentifier
     */
    'schemeType'?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedIdentifier
     */
    'resourceTypeGeneral'?: RelatedIdentifierResourceTypeGeneralEnum;
}

export const RelatedIdentifierRelatedIdentifierTypeEnum = {
    Ark: 'ARK',
    ArXiv: 'arXiv',
    Bibcode: 'bibcode',
    Doi: 'DOI',
    Ean13: 'EAN13',
    Eissn: 'EISSN',
    Handle: 'Handle',
    Igsn: 'IGSN',
    Isbn: 'ISBN',
    Issn: 'ISSN',
    Istc: 'ISTC',
    Lissn: 'LISSN',
    Lsid: 'LSID',
    Pmid: 'PMID',
    Purl: 'PURL',
    Upc: 'UPC',
    Url: 'URL',
    Urn: 'URN',
    W3id: 'w3id'
} as const;

export type RelatedIdentifierRelatedIdentifierTypeEnum = typeof RelatedIdentifierRelatedIdentifierTypeEnum[keyof typeof RelatedIdentifierRelatedIdentifierTypeEnum];
export const RelatedIdentifierRelationTypeEnum = {
    IsCitedBy: 'IsCitedBy',
    Cites: 'Cites',
    IsSupplementTo: 'IsSupplementTo',
    IsSupplementedBy: 'IsSupplementedBy',
    IsContinuedBy: 'IsContinuedBy',
    Continues: 'Continues',
    IsDescribedBy: 'IsDescribedBy',
    Describes: 'Describes',
    HasMetadata: 'HasMetadata',
    IsMetadataFor: 'IsMetadataFor',
    HasVersion: 'HasVersion',
    IsVersionOf: 'IsVersionOf',
    IsNewVersionOf: 'IsNewVersionOf',
    IsPreviousVersionOf: 'IsPreviousVersionOf',
    IsPartOf: 'IsPartOf',
    HasPart: 'HasPart',
    IsReferencedBy: 'IsReferencedBy',
    References: 'References',
    IsDocumentedBy: 'IsDocumentedBy',
    Documents: 'Documents',
    IsCompiledBy: 'IsCompiledBy',
    Compiles: 'Compiles',
    IsVariantFormOf: 'IsVariantFormOf',
    IsOriginalFormOf: 'IsOriginalFormOf',
    IsIdenticalTo: 'IsIdenticalTo',
    IsReviewedBy: 'IsReviewedBy',
    Reviews: 'Reviews',
    IsDerivedFrom: 'IsDerivedFrom',
    IsSourceOf: 'IsSourceOf',
    IsRequiredBy: 'IsRequiredBy',
    Requires: 'Requires',
    IsObsoletedBy: 'IsObsoletedBy',
    Obsoletes: 'Obsoletes'
} as const;

export type RelatedIdentifierRelationTypeEnum = typeof RelatedIdentifierRelationTypeEnum[keyof typeof RelatedIdentifierRelationTypeEnum];
export const RelatedIdentifierResourceTypeGeneralEnum = {
    Audiovisual: 'Audiovisual',
    Collection: 'Collection',
    DataPaper: 'DataPaper',
    Dataset: 'Dataset',
    Event: 'Event',
    Image: 'Image',
    InteractiveResource: 'InteractiveResource',
    Model: 'Model',
    PhysicalObject: 'PhysicalObject',
    Service: 'Service',
    Software: 'Software',
    Sound: 'Sound',
    Text: 'Text',
    Workflow: 'Workflow',
    Other: 'Other'
} as const;

export type RelatedIdentifierResourceTypeGeneralEnum = typeof RelatedIdentifierResourceTypeGeneralEnum[keyof typeof RelatedIdentifierResourceTypeGeneralEnum];

/**
 * Json representation of the Digital Object.
 * @export
 * @interface RestDoip
 */
export interface RestDoip {
    /**
     * 
     * @type {string}
     * @memberof RestDoip
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestDoip
     */
    'clientId'?: string;
    /**
     * 
     * @type {Datacite43Schema}
     * @memberof RestDoip
     */
    'datacite'?: Datacite43Schema;
    /**
     * 
     * @type {Array<Content>}
     * @memberof RestDoip
     */
    'attributes'?: Array<Content>;
    /**
     * 
     * @type {Array<Content>}
     * @memberof RestDoip
     */
    'elements'?: Array<Content>;
    /**
     * 
     * @type {Array<Content>}
     * @memberof RestDoip
     */
    'header'?: Array<Content>;
    /**
     * 
     * @type {string}
     * @memberof RestDoip
     */
    'targetId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestDoip
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface Rights
 */
export interface Rights {
    /**
     * 
     * @type {string}
     * @memberof Rights
     */
    'rights'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rights
     */
    'rightsURI'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rights
     */
    'rightsIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rights
     */
    'rightsIdentifierScheme'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rights
     */
    'schemeURI'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rights
     */
    'lang'?: string;
}
/**
 * 
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'subjectScheme'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'schemeURI'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'valueURI'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'lang'?: string;
}
/**
 * 
 * @export
 * @interface Title
 */
export interface Title {
    /**
     * 
     * @type {string}
     * @memberof Title
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Title
     */
    'titleType'?: TitleTitleTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Title
     */
    'lang'?: string;
}

export const TitleTitleTypeEnum = {
    AlternativeTitle: 'AlternativeTitle',
    Subtitle: 'Subtitle',
    TranslatedTitle: 'TranslatedTitle',
    Other: 'Other'
} as const;

export type TitleTitleTypeEnum = typeof TitleTitleTypeEnum[keyof typeof TitleTitleTypeEnum];

/**
 * 
 * @export
 * @interface Types
 */
export interface Types {
    /**
     * 
     * @type {string}
     * @memberof Types
     */
    'resourceType'?: string;
    /**
     * 
     * @type {string}
     * @memberof Types
     */
    'resourceTypeGeneral'?: TypesResourceTypeGeneralEnum;
}

export const TypesResourceTypeGeneralEnum = {
    Audiovisual: 'Audiovisual',
    Collection: 'Collection',
    DataPaper: 'DataPaper',
    Dataset: 'Dataset',
    Event: 'Event',
    Image: 'Image',
    InteractiveResource: 'InteractiveResource',
    Model: 'Model',
    PhysicalObject: 'PhysicalObject',
    Service: 'Service',
    Software: 'Software',
    Sound: 'Sound',
    Text: 'Text',
    Workflow: 'Workflow',
    Other: 'Other'
} as const;

export type TypesResourceTypeGeneralEnum = typeof TypesResourceTypeGeneralEnum[keyof typeof TypesResourceTypeGeneralEnum];


/**
 * MappingControllerApi - axios parameter creator
 * @export
 */
export const MappingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all available mappings.
         * @summary Get all mappings of MetadataHub.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMappings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/mapping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MappingControllerApi - functional programming interface
 * @export
 */
export const MappingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MappingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * List all available mappings.
         * @summary Get all mappings of MetadataHub.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMappings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMappings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MappingControllerApi - factory interface
 * @export
 */
export const MappingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MappingControllerApiFp(configuration)
    return {
        /**
         * List all available mappings.
         * @summary Get all mappings of MetadataHub.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMappings(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getMappings(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MappingControllerApi - object-oriented interface
 * @export
 * @class MappingControllerApi
 * @extends {BaseAPI}
 */
export class MappingControllerApi extends BaseAPI {
    /**
     * List all available mappings.
     * @summary Get all mappings of MetadataHub.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MappingControllerApi
     */
    public getMappings(options?: AxiosRequestConfig) {
        return MappingControllerApiFp(this.configuration).getMappings(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * Rest4DoipControllerApi - axios parameter creator
 * @export
 */
export const Rest4DoipControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * REST interface based on DOIP to enable easier access for websites.
         * @summary REST interface based on DOIP.
         * @param {'OP_CREATE' | 'OP_RETRIEVE' | 'OP_UPDATE' | 'OP_DELETE' | 'OP_SEARCH' | 'OP_VALIDATE'} operationId The operationId.
         * @param {RestDoip} [restDoip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoipOperation: async (operationId: 'OP_CREATE' | 'OP_RETRIEVE' | 'OP_UPDATE' | 'OP_DELETE' | 'OP_SEARCH' | 'OP_VALIDATE', restDoip?: RestDoip, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationId' is not null or undefined
            assertParamExists('postDoipOperation', 'operationId', operationId)
            const localVarPath = `/doip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operationId !== undefined) {
                localVarQueryParameter['operationId'] = operationId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restDoip, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Rest4DoipControllerApi - functional programming interface
 * @export
 */
export const Rest4DoipControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Rest4DoipControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * REST interface based on DOIP to enable easier access for websites.
         * @summary REST interface based on DOIP.
         * @param {'OP_CREATE' | 'OP_RETRIEVE' | 'OP_UPDATE' | 'OP_DELETE' | 'OP_SEARCH' | 'OP_VALIDATE'} operationId The operationId.
         * @param {RestDoip} [restDoip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDoipOperation(operationId: 'OP_CREATE' | 'OP_RETRIEVE' | 'OP_UPDATE' | 'OP_DELETE' | 'OP_SEARCH' | 'OP_VALIDATE', restDoip?: RestDoip, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDoipOperation(operationId, restDoip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Rest4DoipControllerApi - factory interface
 * @export
 */
export const Rest4DoipControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Rest4DoipControllerApiFp(configuration)
    return {
        /**
         * REST interface based on DOIP to enable easier access for websites.
         * @summary REST interface based on DOIP.
         * @param {'OP_CREATE' | 'OP_RETRIEVE' | 'OP_UPDATE' | 'OP_DELETE' | 'OP_SEARCH' | 'OP_VALIDATE'} operationId The operationId.
         * @param {RestDoip} [restDoip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDoipOperation(operationId: 'OP_CREATE' | 'OP_RETRIEVE' | 'OP_UPDATE' | 'OP_DELETE' | 'OP_SEARCH' | 'OP_VALIDATE', restDoip?: RestDoip, options?: any): AxiosPromise<string> {
            return localVarFp.postDoipOperation(operationId, restDoip, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Rest4DoipControllerApi - object-oriented interface
 * @export
 * @class Rest4DoipControllerApi
 * @extends {BaseAPI}
 */
export class Rest4DoipControllerApi extends BaseAPI {
    /**
     * REST interface based on DOIP to enable easier access for websites.
     * @summary REST interface based on DOIP.
     * @param {'OP_CREATE' | 'OP_RETRIEVE' | 'OP_UPDATE' | 'OP_DELETE' | 'OP_SEARCH' | 'OP_VALIDATE'} operationId The operationId.
     * @param {RestDoip} [restDoip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Rest4DoipControllerApi
     */
    public postDoipOperation(operationId: 'OP_CREATE' | 'OP_RETRIEVE' | 'OP_UPDATE' | 'OP_DELETE' | 'OP_SEARCH' | 'OP_VALIDATE', restDoip?: RestDoip, options?: AxiosRequestConfig) {
        return Rest4DoipControllerApiFp(this.configuration).postDoipOperation(operationId, restDoip, options).then((request) => request(this.axios, this.basePath));
    }
}


